#OOPR-Assgn-29
#Start writing your code here
#Spice Hut is a tiffin service provider which home delivers dinner to their customers â€“ Occasional customers and Regular customers


from abc import ABCMeta,abstractmethod
class Customer(metaclass = ABCMeta):
    def __init__(self,customer_name):
        self.__customer_name = customer_name
        self.bill_amount = None
        self.bill_id = None
    @abstractmethod
    def calculate_bill_amount(self):
        pass
        
    def get_customer_name(self):
        return self.__customer_name

class OccasionalCustomer(Customer):
    __counter = 1000
    def __init__(self,customer_name,distance_in_kms):
        self.__distance_in_kms = distance_in_kms
        Customer.__init__(self, customer_name)
        
        OccasionalCustomer.__counter = OccasionalCustomer.__counter + 1
        self.bill_id = 'O' + str(OccasionalCustomer.__counter)
    def validate_distance_in_kms(self):
        if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=5 ):
            return True
        else:
            return False
    
    def calculate_bill_amount(self):
        if(self.validate_distance_in_kms()):
            if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=2):
                x = self.get_distance_in_kms() * 5
                self.bill_amount = 50 + x
            if(self.get_distance_in_kms()>2 and self.get_distance_in_kms()<=5):
                x = self.get_distance_in_kms() * 7.5
                self.bill_amount = float(50) + x
            return self.bill_amount
        else:
            self.bill_amount = -1
            return self.bill_amount
    
    def get_distance_in_kms(self):
        return self.__distance_in_kms
        
  
class RegularCustomer(Customer):
    __counter = 100
    def __init__(self,customer_name,no_of_tiffin):
        self.__no_of_tiffin = no_of_tiffin
        Customer.__init__(self, customer_name)
        RegularCustomer.__counter = RegularCustomer.__counter + 1
        self.bill_id = 'R' + str(RegularCustomer.__counter)
    def validate_no_of_tiffin(self):
        if(self.get_no_of_tiffin()>=1 and self.get_no_of_tiffin()<=7 ):
            return True
        else:
            return False
        
    def calculate_bill_amount(self):
        if(self.validate_no_of_tiffin()):
            x =50* self.get_no_of_tiffin()
            y = x*7
            self.bill_amount = y
            return self.bill_amount
            
        
        else:
            self.bill_amount = -1
            return self.bill_amount
        
        
    def get_no_of_tiffin(self):
        return self.__no_of_tiffin
        
o1 = OccasionalCustomer("Mugdha", 6)
print(o1.calculate_bill_amount())

#r1 = RegularCustomer("Miyu", 8)
#print(r1.calculate_bill_amount())
#print(r1.get_no_of_tiffin())
print(o1.get_distance_in_kms())
